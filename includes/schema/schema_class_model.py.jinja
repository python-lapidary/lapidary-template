class {{ class_model.class_name }}({{ lapidary.type_hint(class_model.base_type, _item) }}):
{%- for attr in class_model.attributes %}
    {{ attr.name }}: typing_extensions.Annotated[
        {{ lapidary.type_hint(attr.annotation.type, _item) }},
        pydantic.Field(
    {%- for key, value in attr.annotation.field_props.items() | sort %}
            {{ key }}={{ value }},
    {%- endfor %}
        )
    ]{% if attr.annotation.default is not none %} = {{ attr.annotation.default }}{% endif %}
{% endfor %}
    class Config(pydantic.BaseConfig):
        use_enum_values = True
{%- if class_model.has_aliases %}
        allow_population_by_field_name = True
{%- endif %}
{%- if class_model.allow_extra %}
        extra = pydantic.Extra.allow
{%- else %}
        extra = pydantic.Extra.forbid
{%- endif %}
